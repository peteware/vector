#ifndef PW_MEMORY_RESOURCE_H // -*- c++ -*-
#define PW_MEMORY_RESOURCE_H

#include <pw/memory>
#include <pw/internal/make_unsigned.h>
#include <pw/internal/bool_type.h>
#include <pw/internal/is_empty.h>

namespace pw {

template<class Alloc>
struct allocator_traits
{
    using allocator_type     = Alloc;
    using value_type         = typename Alloc::value_type;
    using pointer            = typename pointer_traits<value_type*>::pointer;
    using const_pointer      = typename pointer_traits<pointer>::template rebind<const value_type>;
    using void_pointer       = typename pointer_traits<pointer>::template rebind<void>;
    using const_void_pointer = typename pointer_traits<pointer>::template rebind<const void>;
    using difference_type    = typename pointer_traits<pointer>::difference_type;
    using size_type          = typename internal::make_unsigned<difference_type>::type;
    using propagate_on_container_copy_assignment = internal::false_type;
    using propagate_on_container_move_assignment = internal::false_type;
    using propagate_on_container_swap            = internal::false_type;
    using is_always_equal                        = typename internal::is_empty<Alloc>::type;
};

namespace pmr {

template<class Type>
class polymorphic_allocator
{
public:
    using value_type = Type;
};

} // namespace pmr
} // namespace pw

#endif /*  PW_MEMORY_RESOURCE_H */
