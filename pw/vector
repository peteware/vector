#ifndef PW_VECTOR_H // -*- c++ -*-
#define PW_VECTOR_H

#include <pw/impl/allocator.h>
#include <pw/impl/allocator_traits.h>
#include <pw/impl/back_inserter.h>
#include <pw/impl/destroy.h>
#include <pw/impl/distance.h>
#include <pw/impl/equal.h>
#include <pw/impl/fill.h>
#include <pw/impl/for_each.h>
#include <pw/impl/iterator_traits.h>
#include <pw/impl/move_backward.h>
#include <pw/impl/reverse_iterator.h>
#include <pw/impl/uninitialized_copy.h>
#include <pw/impl/uninitialized_default_construct.h>
#include <pw/impl/uninitialized_fill.h>
#include <pw/impl/uninitialized_move.h>
#include <pw/internal/compare.h>
#include <pw/internal/storage.h>

#include <initializer_list>
#include <limits>
#include <stdexcept>

namespace pw {

template<class Type, class Allocator = allocator<Type>>
class vector
{
public:
    using value_type             = Type;
    using allocator_type         = Allocator;
    using size_type              = size_t;
    using difference_type        = ptrdiff_t;
    using reference              = value_type&;
    using const_reference        = value_type const&;
    using pointer                = typename allocator_traits<Allocator>::pointer;
    using const_pointer          = typename allocator_traits<Allocator>::const_pointer;
    using iterator               = typename allocator_traits<Allocator>::pointer;
    using const_iterator         = typename allocator_traits<Allocator>::const_pointer;
    using reverse_iterator       = pw::reverse_iterator<iterator>;
    using const_reverse_iterator = pw::reverse_iterator<iterator const>;

    explicit vector(allocator_type const& alloc = allocator_type());
    vector(vector const& copy);
    vector(vector const& copy, allocator_type const& alloc);
    vector(vector&& other) noexcept;
    vector(vector&& other, const Allocator& alloc);
    explicit vector(size_type count);
    vector(size_type count, value_type const& value, allocator_type const& alloc = allocator_type());
    vector(std::initializer_list<value_type> init, const Allocator& alloc = Allocator());
    ~vector();

    vector& operator=(const vector& other);
    vector& operator=(vector&& other) noexcept;
    vector& operator=(std::initializer_list<value_type> ilist);

    template<class Iterator>
    void              assign(Iterator begin, Iterator end);
    void              assign(size_type count, value_type const& value);
    void              assign(std::initializer_list<value_type> ilist);
    allocator_type    get_allocator() const;
    reference         at(size_type position);
    const_reference   at(size_type position) const;
    reference         operator[](size_type position);
    const_reference   operator[](size_type position) const;
    reference         front();
    const_reference   front() const;
    reference         back();
    const_reference   back() const;
    value_type*       data() noexcept;
    value_type const* data() const noexcept;
    iterator          begin() noexcept;
    iterator          end() noexcept;
    const_iterator    begin() const noexcept;
    const_iterator    end() const noexcept;
    const_iterator    cbegin() const noexcept;
    const_iterator    cend() const noexcept;

    reverse_iterator       rbegin() noexcept;
    reverse_iterator       rend() noexcept;
    const_reverse_iterator rbegin() const noexcept;
    const_reverse_iterator rend() const noexcept;
    const_reverse_iterator crbegin() const noexcept;
    const_reverse_iterator crend() const noexcept;

    bool      empty() const;
    size_type size() const;
    size_type max_size() const;
    size_type capacity() const;
    void      shrink_to_fit();
    void      reserve(size_type count);
    void      clear() noexcept;
    void      push_back(const_reference value);
    void      push_back(value_type&& value);
    void      resize(size_type count);
    void      resize(size_type count, value_type const& value);
    iterator  insert(const_iterator position, value_type const& value);
    iterator  insert(const_iterator position, value_type&& value);
    iterator  insert(const_iterator position, size_type count, value_type const& value);
    iterator  insert(const_iterator position, std::initializer_list<value_type> ilist);
    template<class Iterator>
    iterator insert(const_iterator position, Iterator first, Iterator last);
    iterator erase(const_iterator position);
    iterator erase(const_iterator begin, const_iterator end);
    void     pop_back();

private:
    using Storage = internal::Storage<Type, Allocator>;
    Storage m_data;
};

template<class Type, class Allocator>
void swap(vector<Type, Allocator>& op1, vector<Type, Allocator>& op2) noexcept;

template<class Type, class Allocator>
bool operator==(const std::vector<Type, Allocator>& op1, const std::vector<Type, Allocator>& op2);

template<class Type, class Allocator>
bool operator!=(const std::vector<Type, Allocator>& op1, const std::vector<Type, Allocator>& op2);

template<class Type, class Allocator>
bool operator<(const std::vector<Type, Allocator>& op1, const std::vector<Type, Allocator>& op2);

template<class Type, class Allocator>
bool operator<=(const std::vector<Type, Allocator>& op1, const std::vector<Type, Allocator>& op2);

template<class Type, class Allocator>
bool operator>(const std::vector<Type, Allocator>& op1, const std::vector<Type, Allocator>& op2);

template<class Type, class Allocator>
bool operator>=(const std::vector<Type, Allocator>& op1, const std::vector<Type, Allocator>& op2);

// namespace pmr {
// template<class Type>
// using vector = vector<Type, pmr::polymorphic_allocator<Type>>;
// }

template<class Type, class Allocator>
vector<Type, Allocator>::vector(allocator_type const& alloc)
    : m_data(alloc)
{
}

template<class Type, class Allocator>
vector<Type, Allocator>::vector(size_type count)
    : m_data(count, allocator_type())
{
    m_data.set_size(count);
    pw::uninitialized_default_construct(m_data.begin(), m_data.end());
}

template<class Type, class Allocator>
vector<Type, Allocator>::vector(size_type count, value_type const& value, allocator_type const& alloc)
    : m_data(count, alloc)
{
    m_data.set_size(count);
    pw::uninitialized_fill(m_data.begin(), m_data.end(), value);
}

template<class Type, class Allocator>
vector<Type, Allocator>::vector(vector const& copy)
    : m_data(copy.m_data)
{
}

template<class Type, class Allocator>
vector<Type, Allocator>::vector(vector&& other) noexcept
{
    swap(m_data, other.m_data);
}

template<class Type, class Allocator>
vector<Type, Allocator>::vector(vector&& other, const Allocator& alloc)
    : m_data(allocator_type())
{
    swap(m_data, other.m_data);
}

template<class Type, class Allocator>
vector<Type, Allocator>::vector(std::initializer_list<value_type> init, const Allocator& alloc)
    : m_data(init.size(), alloc)
{
    pw::uninitialized_copy(init.begin(), init.end(), m_data.begin());
    m_data.set_size(init.size());
}

template<class Type, class Allocator>
vector<Type, Allocator>::~vector()
{
}

template<class Type, class Allocator>
vector<Type, Allocator>&
vector<Type, Allocator>::operator=(const vector& other)
{
    if (m_data.capacity() < other.size())
    {
        m_data = Storage(other.m_data, get_allocator());
    }
    else
    {
        pw::destroy(m_data.begin(), m_data.end());
        pw::uninitialized_copy(other.begin(), other.end(), m_data.begin());
        m_data.set_size(other.size());
    }
    return *this;
}

template<class Type, class Allocator>
vector<Type, Allocator>&
vector<Type, Allocator>::operator=(vector&& other) noexcept
{
    if (m_data.capacity() < other.size())
    {
        m_data = Storage(pw::move(other.m_data), other.size());
    }
    else
    {
        pw::destroy(m_data.begin(), m_data.end());
        pw::uninitialized_move(other.begin(), other.end(), m_data.begin());
        m_data.set_size(other.size());
    }
    return *this;
}

template<class Type, class Allocator>
vector<Type, Allocator>&
vector<Type, Allocator>::operator=(std::initializer_list<value_type> ilist)
{
    if (m_data.capacity() < ilist.size())
    {
        Storage s(ilist.size(), get_allocator());

        pw::uninitialized_copy(ilist.begin(), ilist.end(), s.begin());
        s.set_size(ilist.size());
        m_data = s;
    }
    else
    {
        pw::destroy(m_data.begin(), m_data.end());
        pw::uninitialized_copy(ilist.begin(), ilist.end(), m_data.begin());
        m_data.set_size(ilist.size());
    }
    return *this;
}

template<class Type, class Allocator>
void
vector<Type, Allocator>::assign(size_type count, value_type const& value)
{
    if (m_data.capacity() < count)
    {
        Storage s(count, get_allocator());

        pw::uninitialized_fill(s.begin(), s.begin() + count, value);
        s.set_size(count);
        m_data = s;
    }
    else
    {
        pw::destroy(m_data.begin(), m_data.end());
        m_data.set_size(count);
        pw::uninitialized_fill(m_data.begin(), m_data.end(), value);
    }
}

template<class Type, class Allocator>
template<class Iterator>
void
vector<Type, Allocator>::assign(Iterator begin, Iterator end)
{
    size_type count = pw::distance(begin, end);
    if (m_data.capacity() < count)
    {
        Storage s(count, get_allocator());

        pw::uninitialized_copy(begin, end, s.begin());
        s.set_size(count);
        m_data = s;
    }
    else
    {
        size_type replace = pw::min(count, m_data.size());
        pw::copy(begin, begin + replace, m_data.begin());
        pw::uninitialized_copy(begin + replace, end, m_data.begin() + replace);
        m_data.set_size(count);
    }
}

template<class Type, class Allocator>
void
vector<Type, Allocator>::assign(std::initializer_list<value_type> ilist)
{
    assign(ilist.begin(), ilist.end());
}

template<class Type, class Allocator>
typename vector<Type, Allocator>::allocator_type
vector<Type, Allocator>::get_allocator() const
{
    return m_data.get_allocator();
}

template<class Type, class Allocator>
typename vector<Type, Allocator>::reference
vector<Type, Allocator>::at(size_type position)
{
    if (position >= size())
    {
        throw std::out_of_range("position out of range");
    }
    return *(m_data.begin() + position);
}

template<class Type, class Allocator>
typename vector<Type, Allocator>::const_reference
vector<Type, Allocator>::at(size_type position) const
{
    if (position >= size())
    {
        throw std::out_of_range("position out of range");
    }
    return *(m_data.begin() + position);
}

template<class Type, class Allocator>
typename vector<Type, Allocator>::reference vector<Type, Allocator>::operator[](size_type position)
{
    return *(m_data.begin() + position);
}

template<class Type, class Allocator>
typename vector<Type, Allocator>::const_reference
    vector<Type, Allocator>::operator[](size_type position) const
{
    return *(m_data.begin() + position);
}

template<class Type, class Allocator>
typename vector<Type, Allocator>::reference
vector<Type, Allocator>::front()
{
    return *m_data.begin();
}

template<class Type, class Allocator>
typename vector<Type, Allocator>::const_reference
vector<Type, Allocator>::front() const
{
    return *m_data.begin();
}

template<class Type, class Allocator>
typename vector<Type, Allocator>::reference
vector<Type, Allocator>::back()
{
    return *(m_data.end() - 1);
}

template<class Type, class Allocator>
typename vector<Type, Allocator>::const_reference
vector<Type, Allocator>::back() const
{
    return *(m_data.end() - 1);
}

template<class Type, class Allocator>
Type*
vector<Type, Allocator>::data() noexcept
{
    return m_data.begin();
}

template<class Type, class Allocator>
Type const*
vector<Type, Allocator>::data() const noexcept
{
    return m_data.begin();
}

template<class Type, class Allocator>
typename vector<Type, Allocator>::iterator
vector<Type, Allocator>::begin() noexcept
{
    return m_data.begin();
}

template<class Type, class Allocator>
typename vector<Type, Allocator>::iterator
vector<Type, Allocator>::end() noexcept
{
    return m_data.end();
}

template<class Type, class Allocator>
typename vector<Type, Allocator>::const_iterator
vector<Type, Allocator>::begin() const noexcept
{
    return m_data.begin();
}

template<class Type, class Allocator>
typename vector<Type, Allocator>::const_iterator
vector<Type, Allocator>::end() const noexcept
{
    return m_data.end();
}

template<class Type, class Allocator>
typename vector<Type, Allocator>::const_iterator
vector<Type, Allocator>::cbegin() const noexcept
{
    return m_data.begin();
}

template<class Type, class Allocator>
typename vector<Type, Allocator>::const_iterator
vector<Type, Allocator>::cend() const noexcept
{
    return m_data.end();
}

template<class Type, class Allocator>
typename vector<Type, Allocator>::reverse_iterator
vector<Type, Allocator>::rbegin() noexcept
{
    return reverse_iterator(end());
}

template<class Type, class Allocator>
typename vector<Type, Allocator>::reverse_iterator
vector<Type, Allocator>::rend() noexcept
{
    return reverse_iterator(begin());
}

template<class Type, class Allocator>
typename vector<Type, Allocator>::const_reverse_iterator
vector<Type, Allocator>::rbegin() const noexcept
{
    return const_reverse_iterator(end());
}

template<class Type, class Allocator>
typename vector<Type, Allocator>::const_reverse_iterator
vector<Type, Allocator>::rend() const noexcept
{
    return const_reverse_iterator(begin());
}

template<class Type, class Allocator>
typename vector<Type, Allocator>::const_reverse_iterator
vector<Type, Allocator>::crbegin() const noexcept
{
    return const_reverse_iterator(end());
}

template<class Type, class Allocator>
typename vector<Type, Allocator>::const_reverse_iterator
vector<Type, Allocator>::crend() const noexcept
{
    return const_reverse_iterator(begin());
}

template<class Type, class Allocator>
bool
vector<Type, Allocator>::empty() const
{
    return m_data.begin() == m_data.end();
}

template<class Type, class Allocator>
typename vector<Type, Allocator>::size_type
vector<Type, Allocator>::size() const
{
    return m_data.size();
}

template<class Type, class Allocator>
typename vector<Type, Allocator>::size_type
vector<Type, Allocator>::max_size() const
{
    return std::numeric_limits<size_type>::max() / sizeof(Type);
}

template<class Type, class Allocator>
typename vector<Type, Allocator>::size_type
vector<Type, Allocator>::capacity() const
{
    return m_data.capacity();
}

template<class Type, class Allocator>
void
vector<Type, Allocator>::reserve(size_type count)
{
    if (count > capacity())
    {
        m_data = Storage(pw::move(m_data), count);
    }
}

template<class Type, class Allocator>
void
vector<Type, Allocator>::shrink_to_fit()
{
    if (size() == capacity())
    {
        return;
    }
    if (empty())
    {
        m_data = Storage(get_allocator());
    }
    else
    {
        m_data = Storage(pw::move(m_data), size());
    }
}

template<class Type, class Allocator>
void
vector<Type, Allocator>::clear() noexcept
{
    m_data = Storage(get_allocator());
}

template<class Type, class Allocator>
void
vector<Type, Allocator>::push_back(Type const& value)
{
    if (m_data.capacity() == m_data.size())
    {
        m_data = Storage(pw::move(m_data), m_data.newsize());
    }
    m_data.push_back(value);
}

template<class Type, class Allocator>
void
vector<Type, Allocator>::push_back(Type&& value)
{
    if (!m_data.hascapacity())
    {
        m_data = Storage(pw::move(m_data), m_data.newsize());
    }
    m_data.push_back(pw::move(value));
}

template<class Type, class Allocator>
void
vector<Type, Allocator>::resize(size_type count)
{
    if (m_data.size() > count)
    {
        // TODO: need unit test for this bug: pw::destroy(m_data.begin(), m_data.begin() + count);
        pw::destroy(m_data.begin() + count, m_data.end());
        m_data.set_size(count);
    }
    else if (m_data.size() < count)
    {
        m_data = Storage(pw::move(m_data), count);
        pw::uninitialized_default_construct(m_data.end(), m_data.begin() + count);
        m_data.set_size(count);
    }
}

template<class Type, class Allocator>
void
vector<Type, Allocator>::resize(size_type count, value_type const& value)
{
    if (m_data.size() > count)
    {
        pw::destroy(m_data.begin() + count, m_data.end());
        m_data.set_size(count);
    }
    else if (m_data.size() < count)
    {
        m_data = Storage(pw::move(m_data), count);
        pw::uninitialized_fill(m_data.end(), m_data.begin() + count, value);
        m_data.set_size(count);
    }
}

template<class Type, class Allocator>
typename vector<Type, Allocator>::iterator
vector<Type, Allocator>::insert(const_iterator position, value_type const& value)
{
    return insert(position, static_cast<size_type>(1), value);
}

template<class Type, class Allocator>
typename vector<Type, Allocator>::iterator
vector<Type, Allocator>::insert(const_iterator position, size_type count, value_type const& value)
{
    difference_type offset = position - m_data.begin();

    if (!m_data.hascapacity(count))
    {
        m_data = m_data.resize(offset, count, value);
    }
    else
    {
        m_data.move(offset, count, value);
    }
    return m_data.begin() + offset;
}

template<class Type, class Allocator>
void
vector<Type, Allocator>::pop_back()
{
    m_data.set_size(m_data.size() - 1);
    allocator_traits<Allocator>::destroy(m_data.get_allocator(), pw::addressof(*m_data.end()));
}

template<class Type, class Allocator>
void
swap(vector<Type, Allocator>& op1, vector<Type, Allocator>& op2) noexcept
{
    op1.swap(op2);
}

template<class Type, class Allocator>
bool
operator==(const pw::vector<Type, Allocator>& op1, const pw::vector<Type, Allocator>& op2)
{
    if (op1.size() != op2.size())
    {
        return false;
    }
    return pw::equal(op1.begin(), op1.end(), op2.begin(), op2.end());
}

template<class Type, class Allocator>
bool
operator!=(const std::vector<Type, Allocator>& op1, const std::vector<Type, Allocator>& op2)
{
    if (op1.size() != op2.size())
    {
        return true;
    }
    return !pw::equal(op1.begin(), op1.end(), op2.begin(), op2.end());
}

template<class Type, class Allocator>
bool
operator<(const std::vector<Type, Allocator>& op1, const std::vector<Type, Allocator>& op2)
{
    return internal::compare(op1.begin(), op1.end(), op2.begin(), op2.end()) < 0;
}

template<class Type, class Allocator>
bool
operator<=(const std::vector<Type, Allocator>& op1, const std::vector<Type, Allocator>& op2)
{
    return internal::compare(op1.begin(), op1.end(), op2.begin(), op2.end()) <= 0;
}

template<class Type, class Allocator>
bool
operator>(const std::vector<Type, Allocator>& op1, const std::vector<Type, Allocator>& op2)
{
    return internal::compare(op1.begin(), op1.end(), op2.begin(), op2.end()) > 0;
}

template<class Type, class Allocator>
bool
operator>=(const std::vector<Type, Allocator>& op1, const std::vector<Type, Allocator>& op2)
{
    return internal::compare(op1.begin(), op1.end(), op2.begin(), op2.end()) >= 0;
}

} // namespace pw
#endif /*  PW_VECTOR_H */
