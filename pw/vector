#ifndef PW_VECTOR_H // -*- c++ -*-
#define PW_VECTOR_H

#include <pw/internal/allocate.h>

#include <pw/memory>
#include <pw/memory_resource>

#include <stdexcept>

namespace pw {

template<class Type, class Allocator = allocator<Type>>
class vector
{
public:
    using value_type      = Type;
    using allocator_type  = Allocator;
    using size_type       = size_t;
    using difference_type = ptrdiff_t;
    using reference       = value_type&;
    using const_reference = value_type const&;
    using pointer         = typename internal::allocator_traits<Allocator>::pointer;
    using const_pointer   = typename internal::allocator_traits<Allocator>::const_pointer;

    // Default constructor
    vector(allocator_type const& alloc = allocator_type());

    reference       at(size_type position);
    const_reference at(size_type position) const;

    bool      empty() const;
    size_type size() const;
    size_type max_size() const;
    size_type capacity() const;
    void      reserve(size_type count);
    void      push_back(Type const& value);
    void      push_back(Type&& value);

private:
    internal::Allocate<Type, Allocator> m_data;
};

namespace pmr {
template<class Type>
using vector = vector<Type, polymorphic_allocator<Type>>;
}

template<class Type, class Allocator>
vector<Type, Allocator>::vector(allocator_type const& alloc)
    : m_data(alloc)
{
}

template<class Type, class Allocator>
typename vector<Type, Allocator>::reference
vector<Type, Allocator>::at(size_type position)
{
    if (position >= size())
    {
        throw std::out_of_range("position out of range");
    }
    return *(m_data.m_begin + position);
}

template<class Type, class Allocator>
typename vector<Type, Allocator>::const_reference
vector<Type, Allocator>::at(size_type position) const
{
    if (position >= size())
    {
        throw std::out_of_range("position out of range");
    }
    return *(m_data.m_begin + position);
}

template<class Type, class Allocator>
bool
vector<Type, Allocator>::empty() const
{
    return m_data.m_begin == m_data.m_end;
}

template<class Type, class Allocator>
typename vector<Type, Allocator>::size_type
vector<Type, Allocator>::size() const
{
    return m_data.size();
}

template<class Type, class Allocator>
typename vector<Type, Allocator>::size_type
vector<Type, Allocator>::capacity() const
{
    return m_data.m_allocated;
}

template<class Type, class Allocator>
void
vector<Type, Allocator>::push_back(Type const& value)
{
    if (!m_data.hasroom(1))
    {
        internal::Allocate save(m_data);
        save.resize(1);
        save.add(value);
        m_data.swap(save);
    }
    else
    {
        m_data.add(value);
    }
}

template<class Type, class Allocator>
void
vector<Type, Allocator>::push_back(Type&& value)
{
    if (!m_data.hasroom(1))
    {
        internal::Allocate save(m_data);
        save.resize(1);
        save.add(value);
        m_data.swap(save);
    }
    else
    {
        m_data.add(value);
    }
}

} // namespace pw

#endif /*  PW_VECTOR_H */
