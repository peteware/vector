#ifndef PW_VECTOR_H // -*- c++ -*-
#define PW_VECTOR_H

#include <pw/allocator>
#include <pw/memory_resource>

namespace pw {

template<class Type, class Allocator = pw::allocator<Type> >
class vector
{
public:
    using value_type      = Type;
    using allocator_type  = Allocator;
    using size_type       = size_t;
    using difference_type = ptrdiff_t;
    using reference       = value_type&;
    using const_reference = value_type const&;
    using pointer         = typename allocator_traits<Allocator>::pointer;
    using const_pointer   = typename allocator_traits<Allocator>::const_pointer;

    // Default constructor
    vector();

    bool      empty() const;
    size_type size() const;
    size_type capacity() const;

private:
    pointer m_begin;
    pointer m_end;
    pointer m_bufend;
};

namespace pmr {
template<class Type>
using vector = pw::vector<Type, pw::pmr::polymorphic_allocator<Type> >;
}

template<class Type, class Allocator>
vector<Type, Allocator>::vector()
    : m_begin()
    , m_end()
    , m_bufend()
{
}

template<class Type, class Allocator>
bool
vector<Type, Allocator>::empty() const
{
    return m_begin == m_end;
}

template<class Type, class Allocator>
typename vector<Type, Allocator>::size_type
vector<Type, Allocator>::size() const
{
    return m_end - m_begin;
}

template<class Type, class Allocator>
typename vector<Type, Allocator>::size_type
vector<Type, Allocator>::capacity() const
{
    return m_bufend - m_begin;
}
} // namespace pw

#endif /*  PW_VECTOR_H */
